;; Events generated by the layout layer

;; Should be triggered when the layout of the panes underlying the UI
;; elements is changed, which shoould occur whenever the dimensions
;; are changed. Events of this type have no parameters
(define event-type:layout-changed 'layout-changed)

;; The specific layout of UI components for this application

(define (init-layout! get-display-val get-innards set-innards! run-global!)
  (let* ((my-grid-pane (make-pane 0 0 1 1))
	 (my-textbox-pane (make-pane 0 0 1 1))
	 (my-zoom-in-pane (make-pane 0 0 1 1))
	 (my-zoom-out-pane (make-pane 0 0 1 1)))
    (define grid (make-grid my-grid-pane get-display-val))
    (define textbox (make-textbox my-textbox-pane))
    (define zoom-in (make-zoom-in-button my-zoom-in-pane))
    (define zoom-out (make-zoom-out-button my-zoom-out-pane))
    (register-event-callback!
     event-type:dimensions-changed
     (lambda ()
       (let* ((top-section-height (* 2 (+ text-height text-padding)))
	      (out-button-x-left (- graphics-width
				    top-section-height))
	      (in-button-x-left (- out-button-x-left
				   top-section-height)))
	 (set-pane-dimensions! my-grid-pane 0 top-section-height
			       graphics-width graphics-height)
	 (set-pane-dimensions! my-textbox-pane 0 0 in-button-x-left
			       top-section-height)
	 (set-pane-dimensions! my-zoom-in-pane in-button-x-left 0
			       out-button-x-left top-section-height)
	 (set-pane-dimensions! my-zoom-out-pane out-button-x-left 0
			       graphics-width top-section-height)
	 (trigger-event (list event-type:layout-changed)))))
    (let ((selected-cell #f))
      (register-event-callback!
       event-type:cell-selected
       (lambda (grid coords)
	 (set! selected-cell coords)
	 (if coords
	     (set-textbox-input-buffer!
	      textbox
	      (get-innards (car coords) (cdr coords)))
	     (set-textbox-input-buffer! textbox ""))))
      (register-event-callback!
       event-type:text-submitted
       (lambda (textbox text)
	 (if selected-cell
	     (begin
	       (set-innards! (car selected-cell) (cdr selected-cell)
			     text)
	       (grid-update-dimensions! grid))
	     (run-global! text))
	 (trigger-event (list event-type:cell-selected grid #f)))))))
